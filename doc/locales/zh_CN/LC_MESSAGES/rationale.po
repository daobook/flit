# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, Thomas Kluyver
# This file is distributed under the same license as the Flit package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Flit 3.6.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-25 13:21+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../rationale.rst:2
msgid "Why use Flit?"
msgstr ""

#: ../../rationale.rst:4
msgid ""
"*Make the easy things easy and the hard things possible* is an old motto "
"from the Perl community. Flit is entirely focused on the *easy things* "
"part of that, and leaves the hard things up to other tools."
msgstr ""

#: ../../rationale.rst:8
msgid ""
"Specifically, the easy things are pure Python packages with no build "
"steps (neither compiling C code, nor bundling Javascript, etc.). The vast"
" majority of packages on PyPI are like this: plain Python code, with "
"maybe some static data files like icons included."
msgstr ""

#: ../../rationale.rst:13
msgid ""
"It's easy to underestimate the challenges involved in distributing and "
"installing code, because it seems like you just need to copy some files "
"into the right place. There's a whole lot of metadata and tooling that "
"has to work together around that fundamental step. But with the right "
"tooling, a developer who wants to release their code doesn't need to know"
" about most of that."
msgstr ""

#: ../../rationale.rst:19
msgid "What, specifically, does Flit make easy?"
msgstr ""

#: ../../rationale.rst:21
msgid ""
"``flit init`` helps you set up the information Flit needs about your "
"package."
msgstr ""

#: ../../rationale.rst:23
msgid ""
"Subpackages are automatically included: you only need to specify the top-"
"level package."
msgstr ""

#: ../../rationale.rst:25
msgid ""
"Data files within a package directory are automatically included. Missing"
" data files has been a common packaging mistake with other tools."
msgstr ""

#: ../../rationale.rst:27
msgid ""
"The version number is taken from your package's ``__version__`` "
"attribute, so that always matches the version that tools like pip see."
msgstr ""

#: ../../rationale.rst:29
msgid ""
"``flit publish`` uploads a package to PyPI, so you don't need a separate "
"tool to do this."
msgstr ""

#: ../../rationale.rst:32
msgid ""
"Setuptools, the most common tool for Python packaging, now has shortcuts "
"for many of the same things. But it has to stay compatible with projects "
"published many years ago, which limits what it can do by default."
msgstr ""

#: ../../rationale.rst:36
msgid ""
"Flit also has some support for :doc:`reproducible builds <reproducible>`,"
" a feature which some people care about."
msgstr ""

#: ../../rationale.rst:39
msgid ""
"There have been many other efforts to improve the user experience of "
"Python packaging, such as `pbr <https://pypi.org/project/pbr/>`_, but "
"before Flit, these tended to build on setuptools and distutils. That was "
"a pragmatic decision, but it's hard to build something radically "
"different on top of those libraries. The existence of Flit spurred the "
"development of new standards, like :pep:`518` and :pep:`517`, which are "
"now used by other packaging tools such as `Poetry <https://python-"
"poetry.org/>`_ and `Enscons <https://pypi.org/project/enscons/>`_."
msgstr ""

#: ../../rationale.rst:49
msgid "Other options"
msgstr ""

#: ../../rationale.rst:51
msgid ""
"If your package needs a build step, you won't be able to use Flit. "
"`Setuptools <https://setuptools.readthedocs.io/en/latest/>`_ is the de-"
"facto standard, but newer tools such as Enscons_ also cover this case."
msgstr ""

#: ../../rationale.rst:55
msgid ""
"Flit also doesn't help you manage dependencies: you have to add them to "
"``pyproject.toml`` by hand. Tools like Poetry_ and `Pipenv "
"<https://pypi.org/project/pipenv/>`_ have features which help add and "
"update dependencies on other packages."
msgstr ""

